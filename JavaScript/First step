JavaScript: 웹페이지 에서 동적인 요소를 다루는 스크립트 언어.
  적용방법: </body?태그 직전에 <scirpt> 내용 </script>
  외부파일: <script src="파일이름.js"></script>
  
스크립트의 로딩 방법: 모든 HTML 요소는 순서대로 페이지에 로드되며, 자바스크립트 코드가 HTML 요소보다 먼저 실행되면
  조작할 요소가 존재하지도 않기 때문에 에러가 생긴다.
해결방법: 내부: document.addEventListener("DOMContentLoaded", function() { 내용 });
          funtion(){}내부의 자바스크립트 구문은 "DOMContentLoaded" 이벤트(브라우저가 완전히 로드되고 해석될때 발생)가
          발생되기 전까지는 실행되지 않는다. 따라서 모든 body태그 요소가 로드된 이후 자바스크립트 코드가 실행되어 에러를 피할수있다.
          외부: <script src="파일이름.js" async></script>
          async요소는 비동기방식으로 <script>태그에 도달시 HTML요소를 멈추지 않고 다운받도록 유지, script와 HTML모두 동시에 로드및 작동.
async & defer
  async 스크립트는 페이지 렌더링 중단 없이 스크립트를 다운로드 하며 다운로드가 끝나는 즉시 실행한다.
  외부 스크립트끼리의 순서는 보장되지 않으며 각각의 스크립트가 독립적으로 서로에게 의존하지 않을때 적절.
  defer 스크립트는 각각의 스크립트들을 순서대로 다운로드후 실행. 스크립트들이 서로에게 의존하며 하나의 스크립트가 파싱될때까지
  기다려야 할때 적절.
  
주석: 한줄 - // , 여러줄 - /* ~ */

API: 이미 만들어진 코드의 집합체, 개발자들이 만들기 어렵고 힘든부분을 쉽게 구현하도록 하는 프로그램.
  Browser API: 웹 브라우저에 설치된 API, 컴퓨터 환경구성으로 부터 데이터를 보이게 한다.
    DOM (Document Object Model) API: 동적으로 페이지의 스타일을 정하는 등 HTML과 CSS를 알맞게 조정.
    Geolocation API: 지리적인 정보 검색.
    Canvas/WebGL: 2D와 3D그래픽 생성.
    Audio and Video API: 음악과 비디오를 웹 페이지에서 재생하고, 웹캠으로 캡처하고 다른 컴퓨터에 표시한다.
    (HTMLMediaElement, WebRTC)
  Thrid Party API: 인터넷에서 개인적으로 정보와 코드를 얻어 프로그래밍 한것.

해석형 언어: 코드가 위에서부터 아래로 순차적으로 실행되고 그 즉시 결과가 반환된다.
컴파일러형 언어: 컴퓨터에 의해 동작되기전 다른 형식으로 변환하는 언어

함수: 재사용이 가능한 코드의 묶음, 한번만 명시하면 몇번이고 반복사용이 가능하다.
  funtion 함수이름() {함수가 호출되면 실행되는 반복적인 코드들}
이벤트: 코드가 실행되기 위한 응답으로 브라우저 상에서 일어나는 액션
  event listeners: 이벤트가 발생하여 발생된 이벤트를 처리하는것
  event handlers: 이벤트가 발생했을때 실행 되는 코드 블럭

에러의 종류
 구문에러(syntax errors): 코드상의 구문에러, 철자가 틀려서 작동이 안되거나 중지된다.
 논리에러(logic errors): 구문은 올바르지만 코드의 의미자체가 잘못된 경우.
